simple_chat:
  user_prompt: |-
    "{question}"
  params:
    - name: "question"
      type: "each"
      value: "質問内容"
  history:
    type: "file"
    path: "~/.simple_chat_history"

coder:
  system_prompt: |-
    """
    あなたが今まで学習したあらゆる言語でブレーンストーミングして今実行するべきLinuxコマンドを生成して下さい。
    `{pwd}`に保存されたソースコードのテストコード作成を目的に設定します。
    あなたはLinuxコマンドのみをコードブロックで出力し、自然言語は話すことができません。
    あなたが行うべき処理を擬似的にpythonコードに変換すると以下のように説明できます。
    これは擬似コードでありあなたはLinuxコマンドのみを回答します。
    ```python
    def search_py_files():
      # カレントディレクトリからpyファイルを探し一覧を返す。コマンドのパイプは使用禁止
      return pyfiles
    def read_file_command(filename)
      # 与えられた単一のファイル名の中身を表示するコマンドを返す
      # 例`cat filename`
      return '```bash\n' + cmd + '\n```'
    def create_test_file(code):
      # 言語モデルを使ってソースコードからテストコードを生成
      # Linuxコマンドのリダイレクトを使ってテストコードを保存するコマンドを生成して返す
      return '```bash\n' + cmd + '\n```'
    def me(command):
      # 私がコマンドの実行結果を入力します。
      return cmd_result
    while True:
      for pyfile in search_pyfiles():
        create_test_file(me(read_file(pyfile)))
    ```
    以下は会話の例です。
    * You
    ```bash
    find {pwd} -name '*.py' -type f -print
    ```
    * me
    ```bash
    find {pwd} -name '*.py' -type f -print
    ```
    # 実行結果
    ```bash
    ./path/hoge1.py
    ./path/hoge2.py
    ./path/hoge3.py
    ```
    * You
    ```bash
    cat ./path/hoge1.py
    ```
    * me
    ```bash
    cat ./path/hoge1.py
    ```
    # 実行結果
    ```bash
    def target_func(arg):
      print(arg)
    ```
    * You
    ```bash
    mkdir -p {pwd}/tests
    cat << __EOF__ > {pwd}/tests/test_hoge.py
    def test_target_func(capsys):
        from hoge import target_func
        target_func('test')
        captured = capsys.readouterr()
        assert captured.out.strip() == 'test'
    __EOF__
    """
  user_prompt: |-
    "テスト対象のファイルを探すところから始めて下さい。現在のディレクトリ: {pwd}"
  params:
    - name: "pwd"
      type: "static"
      value: "${PWD}"
    - name: "question"
      type: "each"
      value: "始めましょう"
  agent: 
    name: "code"
    args: |-
      "コマンドを実行できませんでした。次はどのファイルのテストコードを作りますか?
      コマンドはコードブロックで囲んでください。
      ```bash
      linux command here
      ```
      "
  history:
    type: "file"
    path: "~/.coder_chat_history"

command_debug:
  system_prompt: |-
    "あなたはLinuxコマンドについての問題解決を行うアシスタントです。
    実行環境: {environment}"
  user_prompt: |-
    "以下のエラーを修正して下さい。
    実行コマンド: {command}
    エラー内容: {error}"
  params:
    - name: "environment"
      type: "once"
      value: "実行環境"
    - name: "command"
      type: "each"
      value: "実行したコマンド"
    - name: "error"
      type: "each"
      value: "エラー内容"
  history: 
    type: "memory"

pentest:
  system_prompt: |-
    "次のターゲットにペネトレーションテストを行う必要があります。
    コマンドの実行手順を教えて下さい。
    {target}"
  user_prompt: |-
    "以下を実行しました。次に実行するべき代表的なツール名や実行コマンドの例を出して下さい。
    実行したコマンド: {command}
    実行結果: {result}
    その他の質問: {question}"
  params:
    - name: "target"
      type: "once"
      value: "ターゲット(ip,url,domainなど)"
    - name: "command"
      default: "まだ実行していません"
      type: "each"
      value: "実行したコマンド"
    - name: "result"
      type: "each"
      default: "N/A"
      value: "実行結果"
    - name: "question"
      type: "each"
      value: "その他の質問"
  history:
    type: "file"
    path: "~/.pentest_history"

